# -*- coding: utf-8 -*-
"""projeto_covid19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_tjedTze6nkL4yd9E9RkYkJ0dXpUpXMx

# Projeto COVID - 19
## Digital Innovation ONe
"""

#Primeiro vamos importar algumas bibliotecas
import pandas as pd
import numpy as np
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
import re
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt

# importando dados
url = 'https://github.com/neylsoncrepalde/projeto_eda_covid/blob/master/covid_19_data.csv?raw=true'
df = pd.read_csv(url, parse_dates=['ObservationDate', 'Last Update']) #caminho usado na minha máquina
df

#conferindo os tipos de dados
df.head()

df.tail()

df.dtypes

#corrigindo nomes das colunas
def corrige_colunas(col_name):
    return re.sub(r"[/| ]", "", col_name).lower()
    
df.columns = [corrige_colunas(col) for col in df.columns]
df

# Análises
#Investigamos as variáveis disponíveis.
#Vamos verificar primeiro quantos estados temos informações para o Brasil.
df.loc[df.countryregion == 'Brazil']
# verificando os casos confirmados no  Brasil desde 26 de fevereiro de 2020
brasil = df.loc[(df.countryregion == 'Brazil') & 
                (df.confirmed > 0)
                ]
brasil
# plotando gráfico da evolução dos casos confirmados

px.line(brasil, 'observationdate', 'confirmed', title='Casos confirmados no Brasil')

#programação funcional

brasil['novoscasos'] = list(map(
    lambda x: 0 if (x==0) else brasil['confirmed'].iloc[x] - brasil['confirmed'].iloc[x-1],
    np.arange(brasil.shape[0])
))

# visualizando casos
px.line(brasil, x= 'observationdate', y='novoscasos', title= 'Novos casos por dia')

# Visualizando mortes

fig = go.Figure()

fig.add_trace(
    go.Scatter(x=brasil.observationdate, y= brasil.deaths, name='Mortes',
               mode='lines+markers', line={'color':'blue'})
)

#layout

fig.update_layout(title='Mortes por covid-19 no Brasil')

fig.show()

# Usando as caracteristicas das séries temporais para analisar os dados


# taxa de crescimento

def taxa_crescimento(data, variable, data_inicio=None, data_fim= None):
      # Se data_inicio for None, define como a primeira data disponível no dataset
    if data_inicio == None:
        data_inicio = data.observationdate.loc[data[variable] > 0].min()
    else:
        data_inicio = pd.to_datetime(data_inicio)
        
    if data_fim == None:
        data_fim = data.observationdate.iloc[-1]
    else:
        data_fim = pd.to_datetime(data_fim)
    
    # Define os valores de presente e passado
    passado = data.loc[data.observationdate == data_inicio, variable].values[0]
    presente = data.loc[data.observationdate == data_fim, variable].values[0]
    
    # Define o número de pontos no tempo q vamos avaliar
    n = (data_fim - data_inicio).days
    
    # Calcula a taxa
    taxa = (presente/passado)**(1/n) - 1

    return taxa*100

cresc_medio = taxa_crescimento(brasil, 'confirmed')
print(f"O crescimento médio do COVID no Brasil no período avaliado foi de {cresc_medio.round(2)} %.")

# Usando taxa no tempo

def taxa_crescimento_diaria(data, variable, data_inicio=None):
    if data_inicio == None:
        data_inicio = data.observationdate.loc[data[variable] > 0].min()
    else:
        data_inicio = pd.to_datetime(data_inicio)
        
    data_fim = data.observationdate.max()
    n = (data_fim - data_inicio).days
    taxas = list(map(
        lambda x: (data[variable].iloc[x] - data[variable].iloc[x-1]) / data[variable].iloc[x-1],
        range(1,n+1)
    ))
    return np.array(taxas)*100

tx_dia = taxa_crescimento_diaria(brasil, 'confirmed')

tx_dia

primeiro_dia = brasil.observationdate.loc[brasil.confirmed > 0].min()
px.line(x=pd.date_range(primeiro_dia, brasil.observationdate.max())[1:],
        y=tx_dia, title='Taxa de crescimento de casos confirmados no Brasil',
       labels={'y':'Taxa de crescimento', 'x':'Data'})

#Usando séries temporais para prever novos casos

novoscasos = brasil.novoscasos
novoscasos.index = brasil.observationdate

res = seasonal_decompose(novoscasos)

fig, (ax1,ax2,ax3, ax4) = plt.subplots(4, 1,figsize=(10,8))
ax1.plot(res.observed)
ax2.plot(res.trend)
ax3.plot(res.seasonal)
ax4.scatter(novoscasos.index, res.resid)
ax4.axhline(0, linestyle='dashed', c='black')
plt.show()

"""# Decompondo a série de confirmados"""

confirmados = brasil.confirmed
confirmados.index = brasil.observationdate

res2 = seasonal_decompose(confirmados)

fig, (ax1,ax2,ax3, ax4) = plt.subplots(4, 1,figsize=(10,8))
ax1.plot(res2.observed)
ax2.plot(res2.trend)
ax3.plot(res2.seasonal)
ax4.scatter(confirmados.index, res2.resid)
ax4.axhline(0, linestyle='dashed', c='black')
plt.show()

"""# Predizendo o número de casos confirmados com um AUTO-ARIMA"""

!pip install pmdarima

from pmdarima.arima import auto_arima

modelo = auto_arima(confirmados)

pd.date_range('2020-05-01', '2020-05-19')

fig = go.Figure(go.Scatter(
    x=confirmados.index, y=confirmados, name='Observed'
))

fig.add_trace(go.Scatter(x=confirmados.index, y = modelo.predict_in_sample(), name='Predicted'))

fig.add_trace(go.Scatter(x=pd.date_range('2020-05-20', '2020-06-05'), y=modelo.predict(15), name='Forecast'))

fig.update_layout(title='Previsão de casos confirmados para os próximos 15 dias',
                 yaxis_title='Casos confirmados', xaxis_title='Data')
fig.show()

# Usando a biblioteca fbprophet
!pip install prophet

import prophet as proph

train = confirmados.reset_index()[:-5]
test = confirmados.reset_index()[-5:]

#renomeando colunas

train.rename(columns={'observationdate':'ds', 'confirmed':'y'}, inplace=True)
test.rename(columns={'observationdate':'ds', 'confirmed':'y'}, inplace=True)

#Definido modelo de crescimento
profeta = proph.Prophet(growth='logistic', changepoints=['2020-03-01','2020-03-30', '2020-04-25',
                                                          '2020-05-03', '2020-05-10'])

#valor da população dado na aula
pop = 211463256   


train['cap'] = pop

#treina no modelo
profeta.fit(train)

#contruir previsões para o futuro

future_dates = profeta.make_future_dataframe(periods=200)
future_dates['cap'] = pop
forecast = profeta.predict(future_dates)

fig = go.Figure()

fig.add_trace(go.Scatter(x=forecast.ds, y=forecast.yhat, name='Predição'))
#fig.add_trace(go.Scatter(x=test.ds, y=test, name='Observados - Teste'))
fig.add_trace(go.Scatter(x=train.ds, y=train.y, name='Observado - Treino'))
fig.update_layout(title='Predições de cados confirmados no Brasil')
fig.show()

#mudadno o valor da pop

train = confirmados.reset_index()[:-5]
test = confirmados.reset_index()[-5:]

#renomeando colunas

train.rename(columns={'observationdate':'ds', 'confirmed':'y'}, inplace=True)
test.rename(columns={'observationdate':'ds', 'confirmed':'y'}, inplace=True)

#Definido modelo de crescimento
profeta = proph.Prophet(growth='logistic', changepoints=['2020-03-01','2020-03-30', '2020-04-25',
                                                          '2020-05-03', '2020-05-10'])

#valor da população dado na aula
pop = 1000000


train['cap'] = pop

#treina no modelo
profeta.fit(train)

#contruir previsões para o futuro

future_dates = profeta.make_future_dataframe(periods=200)
future_dates['cap'] = pop
forecast = profeta.predict(future_dates)

fig = go.Figure()

fig.add_trace(go.Scatter(x=forecast.ds, y=forecast.yhat, name='Predição'))
#fig.add_trace(go.Scatter(x=test.ds, y=test, name='Observados - Teste'))
fig.add_trace(go.Scatter(x=train.ds, y=train.y, name='Observado - Treino'))
fig.update_layout(title='Predições de cados confirmados no Brasil')
fig.show()

